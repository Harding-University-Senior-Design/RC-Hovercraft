This depedency's main purpose is to create an abstraction layer between the specific registers used by the PIC to manage the OC modules that generate the PWM signals.  The dependency achieves this by allowing the user to execute functions that change the signal by setting the percent duty cycle and the frequency of the PWM that is generated by the OC module.  Internally, these functions calculate the value that should be placed in certain OC module registers and put them there automatically without requiring explicit user control.

This dependency is ONLY intended for use with Microchip's PIC24FJ128GA202 microcontroller.  Use with any other microcontroller is not guaranteed to work--and may actually damage the component.

6 pins are assigned modules in this dependency.  There are only 6 OC modules on this PIC, which is why only up to 6 pins can be used.

RP0 (Pin 4):	OC Module 1, used to generate a PWM signal
RP1 (Pin 5):	OC Module 2, used to generate a PWM signal
RP2 (Pin 6):	OC Module 3, used to generate a PWM signal
RP3 (Pin 7):	OC Module 4, used to generate a PWM signal
RP9 (Pin 18):	OC Module 5, used to generate a PWM signal
RP10 (Pin 21):	OC Module 6, used to generate a PWM signal

However, these will not be set in Peripheral Pin Select unless their corresponding Initialize function is called.
Therefore, you will be able to use this dependency and pick and choose which pins you want to initialize.

The 5V tolerant pins on this PIC have been intentially skipped, because this dependency is not intended to be used to generate a 5V output signal.  For the purposes of this project, the only thing that the 5V tolerant pins will be used for is input from the wireless controller's receiver (which naturally runs at 3.8V to 4.3V, too high for a standard IO pin on this PIC to handle).

*	Follow the base initialization demonstrated in the ExampleUsageForPWMDependency program, specifically the PWM_Module_Initialize function.  Once that is set up, you can use the PWM_Module objects as you would any other C struct without having to know the the details of how an OC module works on this PIC.
*	It is suggested that you name the corresponding PWM_module object after its intended use (as seen in the example, where the PWM modules are named after the left and right motors that it is controlling)
*	If all 6 OC modules are not needed, it is possible to delete all of the functions for the OC modules you are not using (in both the PWM.h and PWM.c files) to save on space when this dependency is written to the PIC.